{"version":3,"file":"static/js/authorization.decd7592.chunk.js","mappings":"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","sources":["webpack://my-contacts-book/./src/components/Container/Container.module.css?9f71","components/Container/Container.js","webpack://my-contacts-book/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.js","webpack://my-contacts-book/./src/components/VerificationForm/VerificationForm.module.css?7bb1","components/VerificationForm/VerificationForm.js","webpack://my-contacts-book/./src/components/VerificationEmail/VerificationEmail.module.css?2e9b","components/VerificationEmail/VerificationEmail.js","pages/AuthorizationPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegistrationForm_form__c8X43\",\"item\":\"RegistrationForm_item__F5OR7\",\"label\":\"RegistrationForm_label__zrkEU\",\"button\":\"RegistrationForm_button__XU1LB\",\"error\":\"RegistrationForm_error__hvKUg\"};","import PropTypes from 'prop-types';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport {\n  useRegisterUserMutation,\n  useAuthorizeUserMutation,\n} from 'redux/contactsAPI';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setUser } from 'redux/reducer';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport s from './RegistrationForm.module.css';\n\nexport default function RegistrationForm({ registration }) {\n  const dispatch = useDispatch();\n  const [registerUser] = useRegisterUserMutation();\n  const [authorizeUser] = useAuthorizeUserMutation();\n  const navigate = useNavigate();\n\n  return (\n    <Formik\n      initialValues={\n        registration\n          ? { name: '', email: '', password: '' }\n          : { email: '', password: '' }\n      }\n      validationSchema={Yup.object({\n        name:\n          registration &&\n          Yup.string()\n            .matches(\n              /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n              \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            )\n            .required('Required'),\n        email: Yup.string()\n          .email('Please provide valid e-mail')\n          .required('Required'),\n        password: Yup.string()\n          .required('No password provided.')\n          .min(8, 'Password is too short - should be 8 chars minimum.'),\n      })}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        registration\n          ? registerUser(values)\n              .unwrap()\n              .then(() => {\n                // dispatch(setUser(payload));\n                navigate('/authorization', { replace: true });\n                toast.success(`Please verify your e-mail`);\n              })\n              .catch(err => {\n                if (err.status === 409) {\n                  toast.error(\n                    `User with such email already exist. Do you want to Log in?`,\n                    {\n                      position: toast.POSITION.TOP_RIGHT,\n                      onClick: () =>\n                        navigate('/authorization', { replace: true }),\n                    }\n                  );\n                } else {\n                  toast.error(err.data.message, {\n                    position: toast.POSITION.TOP_RIGHT,\n                  });\n                }\n              })\n          : authorizeUser(values)\n              .unwrap()\n              .then(payload => {\n                dispatch(setUser(payload));\n                navigate('/contacts', { replace: true });\n              })\n              .catch(err => {\n                toast.error(err.data.message, {\n                  position: toast.POSITION.TOP_RIGHT,\n                });\n              });\n        setSubmitting(false);\n        resetForm({});\n      }}\n    >\n      <Form className={s.form}>\n        {registration && (\n          <>\n            <label htmlFor=\"name\" className={s.label}>\n              Name\n            </label>\n            <Field name=\"name\" type=\"text\" className={s.input} />\n            <ErrorMessage\n              name=\"name\"\n              render={msg => <div className={s.error}>{msg}</div>}\n            />\n          </>\n        )}\n        <label htmlFor=\"email\" className={s.label}>\n          E-mail\n        </label>\n        <Field name=\"email\" type=\"email\" className={s.input} />\n        <ErrorMessage\n          name=\"email\"\n          render={msg => <div className={s.error}>{msg}</div>}\n        />\n\n        <label htmlFor=\"password\" className={s.label}>\n          Password\n        </label>\n        <Field name=\"password\" type=\"password\" className={s.input} />\n        <ErrorMessage\n          name=\"password\"\n          render={msg => <div className={s.error}>{msg}</div>}\n        />\n\n        <button type=\"submit\" className={s.button}>\n          {registration ? 'Register' : 'Sign in'}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\nRegistrationForm.propTypes = {\n  registration: PropTypes.bool,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"VerificationForm_form__q7Pm7\",\"label\":\"VerificationForm_label__eVbt0\",\"button\":\"VerificationForm_button__aXdGi\",\"error\":\"VerificationForm_error__zOsBH\"};","import React from 'react';\nimport { useResendVerificationMutation } from 'redux/contactsAPI';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport s from './VerificationForm.module.css';\n\nexport default function VerificationForm({ onClose }) {\n  const [resendVerification] = useResendVerificationMutation();\n  return (\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={Yup.object({\n        email: Yup.string()\n          .email('Please provide valid e-mail')\n          .required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        resendVerification(values)\n          .unwrap()\n          .then(data => {\n            toast.success(data.message, {\n              position: toast.POSITION.TOP_RIGHT,\n            });\n            onClose();\n          })\n          .catch(err => {\n            toast.error(err.data.message, {\n              position: toast.POSITION.TOP_RIGHT,\n            });\n          });\n        setSubmitting(false);\n        resetForm({});\n      }}\n    >\n      <Form className={s.form}>\n        <label htmlFor=\"email\" className={s.label}>\n          E-mail\n        </label>\n        <Field name=\"email\" type=\"email\" className={s.input} />\n        <ErrorMessage\n          name=\"email\"\n          render={msg => <div className={s.error}>{msg}</div>}\n        />\n        <button type=\"submit\" className={s.button}>\n          Resend verification email\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"VerificationEmail_link__zwQk7\"};","import { useState } from 'react';\nimport Popover from '@mui/material/Popover';\nimport VerificationForm from 'components/VerificationForm';\nimport s from './VerificationEmail.module.css';\n\nexport default function VerificationEmail() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  return (\n    <div>\n      <p onClick={handleClick} className={s.link}>\n        Resend vefification letter\n      </p>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n      >\n        <VerificationForm onClose={handleClose} />\n      </Popover>\n    </div>\n  );\n}\n","import RegistrationForm from 'components/RegistrationForm';\nimport Container from 'components/Container';\nimport VerificationEmail from 'components/VerificationEmail';\n\nexport default function AuthorizationPage() {\n  return (\n    <Container>\n      <RegistrationForm />\n      <VerificationEmail />\n    </Container>\n  );\n}\n"],"names":["Container","children","className","s","RegistrationForm","registration","dispatch","useDispatch","useRegisterUserMutation","registerUser","useAuthorizeUserMutation","authorizeUser","navigate","useNavigate","initialValues","name","email","password","validationSchema","Yup","matches","required","min","onSubmit","values","setSubmitting","resetForm","unwrap","then","replace","toast","catch","err","status","position","onClick","data","message","payload","setUser","htmlFor","type","render","msg","VerificationForm","onClose","useResendVerificationMutation","resendVerification","VerificationEmail","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","event","currentTarget","Popover","anchorOrigin","vertical","horizontal","AuthorizationPage"],"sourceRoot":""}